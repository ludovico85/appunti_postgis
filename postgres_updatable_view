############################### data example #######################################
CREATE TABLE specie
(specie_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
nome_comune TEXT UNIQUE,
nome_scientifico TEXT UNIQUE);

CREATE TABLE rilevatore
(rilevatore_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
nome_cognome TEXT);

CREATE TABLE evento_investimento
(evento_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
data DATE,
ora TIME WITHOUT TIME ZONE,
rilevatore_id INT REFERENCES rilevatore (rilevatore_id),
specie_id INT REFERENCES specie(specie_id));

CREATE VIEW inserimento_dati_vista AS
SELECT row_number() OVER ()::integer AS gid,
evento_investimento.evento_id,
evento_investimento.ora,
evento_investimento.data,
rilevatore.rilevatore_id,
rilevatore.nome_cognome,
specie.specie_id,
specie.nome_comune,
specie.nome_scientifico
FROM evento_investimento
JOIN specie ON evento_investimento.specie_id = specie.specie_id
JOIN rilevatore ON evento_investimento.rilevatore_id = rilevatore.rilevatore_id;
############################### triger functiont #####################################
CREATE OR REPLACE FUNCTION dati_evento () RETURNS TRIGGER AS $$
DECLARE
ril_id INT;
sp_id INT;
eve_id INT;
BEGIN
	IF (TG_OP = 'INSERT') THEN
		WITH inserted_rilevatore AS (
			INSERT INTO rilevatore (rilevatore_id, nome_cognome) VALUES (DEFAULT, NEW.nome_cognome) RETURNING rilevatore_id
			), inserted_specie AS (
			INSERT INTO specie (specie_id, nome_comune, nome_scientifico) VALUES (DEFAULT, NEW.nome_comune, NEW.nome_scientifico) RETURNING specie_id
			), inserted_evento_investimento AS (
			INSERT INTO evento_investimento (evento_id, data, ora, rilevatore_id, specie_id)
											 SELECT nextval ('evento_investimento_evento_id_seq'::regclass),
											 NEW.data, NEW.ora, rilevatore_id, specie_id FROM inserted_rilevatore, inserted_specie RETURNING rilevatore_id, specie_id,
											 evento_id)
											 SELECT rilevatore_id, specie_id, evento_id INTO ril_id, sp_id, eve_id FROM inserted_evento_investimento;
											 NEW.rilevatore_id = ril_id;
											 NEW.specie_id = sp_id;
											 NEW.evento_id = eve_id;
											 RETURN NEW;
	ELSIF (TG_OP = 'UPDATE' AND OLD.rilevatore_id = NEW.rilevatore_id AND OLD.specie_id = NEW.specie_id AND OLD.evento_id = NEW.evento_id) THEN
		UPDATE rilevatore SET nome_cognome = new.nome_cognome WHERE rilevatore_id = new.rilevatore_id;
		UPDATE specie SET nome_comune = new.nome_comune, nome_scientifico = new.nome_scientifico WHERE specie_id = new.specie_id;		
		UPDATE evento_investimento SET data = NEW.data, ora= NEW.ora WHERE evento_id = NEW.evento_id;
		RETURN NEW;
	ELSIF (TG_OP = 'DELETE') THEN
		DELETE FROM rilevatore WHERE rilevatore_id = OLD.rilevatore_id;
		DELETE FROM specie WHERE specie_id = OLD.specie_id;
		DELETE FROM evento_investimento WHERE evento_id = OLD.evento_id;
		RETURN OLD;
	ELSE
		RAISE EXCEPTION 'An error occurred for % operation', TG_OP;
		RETURN NULL;
	END IF;
END;
$$ language plpgsql;
##################################################################################################################################################
CREATE TRIGGER inserimento_dati_trg INSTEAD OF INSERT OR UPDATE OR DELETE ON inserimento_dati_vista FOR EACH ROW EXECUTE PROCEDURE dati_evento ();
##################################################################################################################################################
INSERT INTO inserimento_dati_vista (gid,ora, data, nome_cognome, nome_comune, nome_scientifico)
VALUES (DEFAULT,'12:34:00', '2020-03-11', 'luca', 'lupo', 'Canis lupus')